<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱吃猫粮的哈士奇的个人博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-11T12:03:01.970Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis分布式锁</title>
    <link href="http://example.com/2021/04/11/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://example.com/2021/04/11/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2021-04-11T12:01:48.000Z</published>
    <updated>2021-04-11T12:03:01.970Z</updated>
    
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis集群架构</title>
    <link href="http://example.com/2021/04/09/redis%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2021/04/09/redis%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</id>
    <published>2021-04-09T13:52:44.000Z</published>
    <updated>2021-04-11T12:00:23.463Z</updated>
    
    
    <summary type="html">&lt;p&gt;a先说说是为什么引入的redis集群，在我开发的一个项目中，涉及到了缓存雪崩的问题，当时想到的解决方案是，写一个随机数，随机redis的失效时间，但是，在后续发现了一个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;在早上七点我redis随机了三个小时失效，早上八点我又随机了两个小时失效，这种情况下，在早上十点还是会引发雪崩的问题，并且我们无法保证redis宕机后会怎么办，所以引出了今天redis集群的思考，接下来我们先学习一下reids集群的三种模式。&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap(一)</title>
    <link href="http://example.com/2021/04/09/ConcurrentHashMap-%E4%B8%80/"/>
    <id>http://example.com/2021/04/09/ConcurrentHashMap-%E4%B8%80/</id>
    <published>2021-04-09T13:41:18.000Z</published>
    <updated>2021-04-09T13:52:52.202Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;当我们提到Map集合的时候，我们第一想法都是HashMap和HashTable，但是HashMap和HashTable都有自己的缺点。&lt;/p&gt;
&lt;p&gt;首先HashMap它跟HashTable比，HashMap因为没有加锁，所以它的效率很高，但同时，它在多线程环境下，它无法保</summary>
        
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String字符串有没有上限</title>
    <link href="http://example.com/2021/04/01/String%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%89%E6%B2%A1%E6%9C%89%E4%B8%8A%E9%99%90/"/>
    <id>http://example.com/2021/04/01/String%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%89%E6%B2%A1%E6%9C%89%E4%B8%8A%E9%99%90/</id>
    <published>2021-04-01T13:22:47.000Z</published>
    <updated>2021-04-01T15:24:00.077Z</updated>
    
    
    <summary type="html">&lt;p&gt;String字符串到底有没有上限呢？我们通过源码来分析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先&lt;/strong&gt;，我们需要知道String字符串实际是用什么存储的，在jdk1.6中，String是用byte数组存储的，在jdk1.8中，String是用char[]存储的。&lt;/p&gt;
&lt;p&gt;数组，我们是需要可以设置大小的，数组设置大小有两种方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//数组长度为12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] ar = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;;   &lt;span class=&quot;comment&quot;&gt;//数组长度为5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中，数组长度的定义都为整数，至于为什么是整数类型，我们可以看一下length()这个方法，该方法的返回值是int类型，所以数组长度不可能超过int类型的上限，我们通过Integer的代码中可以看到：&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>maven如何使项目打包时排除指定的依赖</title>
    <link href="http://example.com/2021/03/30/maven%E5%A6%82%E4%BD%95%E4%BD%BF%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%97%B6%E6%8E%92%E9%99%A4%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BE%9D%E8%B5%96/"/>
    <id>http://example.com/2021/03/30/maven%E5%A6%82%E4%BD%95%E4%BD%BF%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%97%B6%E6%8E%92%E9%99%A4%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BE%9D%E8%B5%96/</id>
    <published>2021-03-30T12:06:51.000Z</published>
    <updated>2021-03-30T12:35:26.972Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;打包时，需要将项目中的一些依赖排除出去，查询后使用代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池之Druid--配置篇</title>
    <link href="http://example.com/2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B9%8BDruid/"/>
    <id>http://example.com/2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B9%8BDruid/</id>
    <published>2021-03-23T13:46:12.000Z</published>
    <updated>2021-03-30T13:01:48.820Z</updated>
    
    
    <summary type="html">&lt;p&gt;日常开发中数据库是我们都要使用的，使用数据库也就意味着必须建立项目和数据之间的联系，所以我们需要使用数据库连接池，目前我选择使用druid连接池，该连接池是阿里开源的，功能非常强大，最大的特点是可以监控sql和可视化界面，目前各种数据库连接池的特点如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://aaaas.oss-cn-beijing.aliyuncs.com/image-20210330202641268.png&quot; alt=&quot;image-20210330202641268&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步入正题&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>redis为什么要配置连接池</title>
    <link href="http://example.com/2021/03/23/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://example.com/2021/03/23/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2021-03-23T12:25:48.000Z</published>
    <updated>2021-04-09T14:08:49.401Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;​        </summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>缓存</title>
    <link href="http://example.com/2021/03/10/%E7%BC%93%E5%AD%98/"/>
    <id>http://example.com/2021/03/10/%E7%BC%93%E5%AD%98/</id>
    <published>2021-03-10T08:40:10.000Z</published>
    <updated>2021-03-23T12:42:28.720Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;缓存（缓存雪崩，缓存击穿，缓存穿透）&quot;&gt;&lt;a href=&quot;#缓存（缓存雪崩，缓存击穿，缓存穿透）&quot; class=&quot;headerlink&quot; title=&quot;缓存（缓存雪崩，缓存击穿，缓存穿透）&quot;&gt;&lt;/a&gt;缓存（缓存雪崩，缓存击穿，缓存穿透）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;首先&lt;/strong&gt;，什么是缓存，在计算机中，数据的运行方式是 CPU&amp;gt;内存&amp;gt;储存，所以内存是直接与cpu交流的，最接近CPU的，所以内存的效率是很高的，但是，内存是RAM，也就是说，当机器停机或断电情况下，内存会全部消失。&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="缓存" scheme="http://example.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>装箱拆箱</title>
    <link href="http://example.com/2021/03/10/%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/"/>
    <id>http://example.com/2021/03/10/%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/</id>
    <published>2021-03-10T08:35:28.000Z</published>
    <updated>2021-03-23T12:42:18.265Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;装箱-java中将这个机制设置为自动&quot;&gt;&lt;a href=&quot;#装箱-java中将这个机制设置为自动&quot; class=&quot;headerlink&quot; title=&quot;装箱(java中将这个机制设置为自动)&quot;&gt;&lt;/a&gt;装箱(java中将这个机制设置为自动)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;装箱的概念为将基本数据类型转换为包装类型&lt;/li&gt;
&lt;li&gt;构造函数：可用于将基本类型转换为包装器类型&lt;/li&gt;
&lt;li&gt;valueOf()：可用于将基本类型转换为包装器类型&lt;/li&gt;
&lt;li&gt;自动装箱&lt;ul&gt;
&lt;li&gt;&lt;p&gt;int x= 1; Integer y = x;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;public void demo(Integer a){} int x = 1; demo(x);&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务</title>
    <link href="http://example.com/2021/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://example.com/2021/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</id>
    <published>2021-03-10T08:28:15.000Z</published>
    <updated>2021-03-23T12:42:23.031Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;四大特性&quot;&gt;&lt;a href=&quot;#四大特性&quot; class=&quot;headerlink&quot; title=&quot;四大特性&quot;&gt;&lt;/a&gt;四大特性&lt;/h2&gt;&lt;h3 id=&quot;原子性&quot;&gt;&lt;a href=&quot;#原子性&quot; class=&quot;headerlink&quot; title=&quot;原子性&quot;&gt;&lt;/a&gt;原子性&lt;/h3&gt;&lt;p&gt;整个操作看成为一个整体，要么成功，要么失败，有一个回滚机制&lt;/p&gt;
&lt;h3 id=&quot;隔离性&quot;&gt;&lt;a href=&quot;#隔离性&quot; class=&quot;headerlink&quot; title=&quot;隔离性&quot;&gt;&lt;/a&gt;隔离性&lt;/h3&gt;&lt;p&gt;这里涉及到了数据库锁&lt;br&gt;排他锁&lt;br&gt;X锁，写锁&lt;br&gt;共享锁&lt;br&gt;S锁，读锁&lt;br&gt;可能会有多个线程同时访问同一条数据，这样数据库会出现一条数据多方调用，这么做会产生数据的更新丢失，&lt;br&gt;为了压制数据更新丢失，数据库标准提出了四类隔离级别&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://example.com/2021/03/10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/03/10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-03-10T03:48:07.000Z</published>
    <updated>2021-03-23T12:42:35.733Z</updated>
    
    
    <summary type="html">&lt;p&gt;Java的设计模式一共有23中，今天我们说单例模式，单例模式是一种最常见的设计模式，在springmvc中bean的注入使用的就是单例模式。&lt;/p&gt;
&lt;p&gt;单例模式，只能存在一个实例，并且自己创建自己的对象，这个类提供了一个访问这个对象的唯一方式，可直接访问，不需要通过new来创建一个新的对象，单例模式一共有五种创建方式，下面分别查看这几种方式。&lt;/p&gt;</summary>
    
    
    
    <category term="编程思想" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
