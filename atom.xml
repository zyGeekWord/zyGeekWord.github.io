<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱吃猫粮的哈士奇的个人博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-07T10:00:42.211Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Monitor</title>
    <link href="http://example.com/2022/05/07/Monitor/"/>
    <id>http://example.com/2022/05/07/Monitor/</id>
    <published>2022-05-07T06:18:04.000Z</published>
    <updated>2022-05-07T10:00:42.211Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是Monitor&quot;&gt;&lt;a href=&quot;#什么是Monitor&quot; class=&quot;headerlink&quot; title=&quot;什么是Monitor&quot;&gt;&lt;/a&gt;什么是Monitor&lt;/h1&gt;&lt;p&gt;在最开始接触到Monitor是在synchronized关键字中接触到，所以一直好奇到底什么是Monitor，Monitor是做什么的，本文开始了解一下Monitor。&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>synchronized的实现原理与应用</title>
    <link href="http://example.com/2022/05/05/synchronized/"/>
    <id>http://example.com/2022/05/05/synchronized/</id>
    <published>2022-05-05T08:43:43.000Z</published>
    <updated>2022-05-05T09:40:23.003Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;synchronized是Java中一个元老级别的角色，我们都叫他重量级锁，但是随着jdk1.6对其进行了各种优化后，它在一些情况下就不是那么重了。&lt;/p&gt;
&lt;p&gt;先看一下synchronized实现我们代码同步的基础：Java中每个对象都可以作为锁。具体表现为如下三种格式</summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>mysql回表</title>
    <link href="http://example.com/2022/04/12/mysql%E5%9B%9E%E8%A1%A8/"/>
    <id>http://example.com/2022/04/12/mysql%E5%9B%9E%E8%A1%A8/</id>
    <published>2022-04-12T12:28:19.000Z</published>
    <updated>2022-04-20T01:51:08.142Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Mysql回表&quot;&gt;&lt;a href=&quot;#Mysql回表&quot; class=&quot;headerlink&quot; title=&quot;Mysql回表&quot;&gt;&lt;/a&gt;Mysql回表&lt;/h1&gt;&lt;h2 id=&quot;首先我们要先了解什么是聚簇索引和非聚簇索引&quot;&gt;&lt;a href=&quot;#首先我们要先了解什么是聚簇索引和非聚簇索引&quot; class=&quot;headerlink&quot; title=&quot;首先我们要先了解什么是聚簇索引和非聚簇索引&quot;&gt;&lt;/a&gt;首先我们要先了解什么是聚簇索引和非聚簇索引&lt;/h2&gt;&lt;p&gt;在本文中，我们使用的都是mysql的Innodb存储引擎&lt;/p&gt;
&lt;h3 id=&quot;聚簇索引&quot;&gt;&lt;a href=&quot;#聚簇索引&quot; class=&quot;headerlink&quot; title=&quot;聚簇索引&quot;&gt;&lt;/a&gt;聚簇索引&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果表设置了主键，则主键就是聚簇索引&lt;/li&gt;
&lt;li&gt;如果表没有主键，则会默认第一个NOT NULL，且唯一（UNIQUE）的列作为聚簇索引&lt;/li&gt;
&lt;li&gt;以上都没有，则会默认创建一个隐藏的row_id作为聚簇索引&lt;blockquote&gt;
&lt;p&gt;InnoDB的聚簇索引的叶子节点存储的是行记录（其实是页结构，一个页包含多行数据），InnoDB必须要有至少一个聚簇索引。&lt;br&gt;由此可见，使用聚簇索引查询会很快，因为可以直接定位到行记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 找到了索引就找到了需要的数据，那么这个索引就是聚簇索引，所以主键就是聚簇索引，修改聚簇索引其实就是修改主键。&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>InputStream与OutPutStream的相互转换</title>
    <link href="http://example.com/2021/04/29/InputStream%E4%B8%8EOutPutStream%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <id>http://example.com/2021/04/29/InputStream%E4%B8%8EOutPutStream%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-04-28T16:31:38.000Z</published>
    <updated>2022-02-22T03:23:34.087Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>transient</title>
    <link href="http://example.com/2021/04/29/transient/"/>
    <id>http://example.com/2021/04/29/transient/</id>
    <published>2021-04-28T16:31:03.000Z</published>
    <updated>2022-02-22T03:23:34.093Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Java方法间调用到底是引用传递还是值传递？</title>
    <link href="http://example.com/2021/04/26/Java%E6%96%B9%E6%B3%95%E9%97%B4%E8%B0%83%E7%94%A8%E5%88%B0%E5%BA%95%E6%98%AF%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E8%BF%98%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/"/>
    <id>http://example.com/2021/04/26/Java%E6%96%B9%E6%B3%95%E9%97%B4%E8%B0%83%E7%94%A8%E5%88%B0%E5%BA%95%E6%98%AF%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E8%BF%98%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/</id>
    <published>2021-04-26T13:39:28.000Z</published>
    <updated>2022-02-22T03:23:34.088Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;方法之间参数传递到底是值传参还是引用传参？&lt;/p&gt;
&lt;p&gt;我们先看一段代码&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>单链表</title>
    <link href="http://example.com/2021/04/18/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2021/04/18/%E5%8D%95%E9%93%BE%E8%A1%A8/</id>
    <published>2021-04-18T15:32:04.000Z</published>
    <updated>2022-02-22T03:23:34.094Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天学习一下数据结构，经常看到单链表的文章，面试也经常会问，那么接下来，我们开始进入单链表的学习。&lt;/p&gt;
&lt;p&gt;首先，单链表的数据结构是什么样的呢？单链表的代码是如何实现的呢？我们先看一下单链表的数据结构图。&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Volatile</title>
    <link href="http://example.com/2021/04/18/Volatile/"/>
    <id>http://example.com/2021/04/18/Volatile/</id>
    <published>2021-04-18T12:23:49.000Z</published>
    <updated>2022-02-22T03:23:34.091Z</updated>
    
    
    <summary type="html">&lt;p&gt;单例模式中，有一个双重锁模式，双重锁模式中应用到了此关键字，接下来我们对volatile的工作方式进行查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;volatile写理解：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当写一个volatile变量时，JMM会把该线程对应的本地中的共享变量值刷新到主内存。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>redis持久化</title>
    <link href="http://example.com/2021/04/17/redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://example.com/2021/04/17/redis%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2021-04-17T15:25:53.000Z</published>
    <updated>2022-02-22T03:23:34.092Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;redis，缓存类型数据库，高效，单线程，这是我们对redis的第一印象，但是redis，数据存储在缓存中，当突然宕机或者redis重启了，这些数据怎么办？&lt;/p&gt;
&lt;p&gt;由此，引出我们接下来的话题，redis，持久化，redis为了防止数据丢失，提出了两套方案，RDB和A</summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis分布式锁</title>
    <link href="http://example.com/2021/04/11/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://example.com/2021/04/11/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2021-04-11T12:01:48.000Z</published>
    <updated>2022-02-22T03:23:34.091Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;首先redis锁要解决什么？-内含本人使用思考&quot;&gt;&lt;a href=&quot;#首先redis锁要解决什么？-内含本人使用思考&quot; class=&quot;headerlink&quot; title=&quot;首先redis锁要解决什么？(内含本人使用思考)&quot;&gt;&lt;/a&gt;首先redis锁要解决什么？(内含本人使用思考)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;互斥性：任意时刻只能有一个客户端获取锁，不能同时有两个客户端获取到锁；&lt;/li&gt;
&lt;li&gt;安全性：锁只能被持有的客户端删除，不能由其他客户端删除；&lt;/li&gt;
&lt;li&gt;死锁：获取锁的客户端因为某些原因而宕机而未能释放锁，其他客户端再也无法获取到该锁导致的死锁，此时需要有机制来避免问题的发生；&lt;/li&gt;
&lt;li&gt;容错：当部分节点如redis某些节点宕机时，客户端仍然能够获取锁和释放锁&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis集群架构</title>
    <link href="http://example.com/2021/04/09/redis%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2021/04/09/redis%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</id>
    <published>2021-04-09T13:52:44.000Z</published>
    <updated>2022-02-22T03:23:34.093Z</updated>
    
    
    <summary type="html">&lt;p&gt;a先说说是为什么引入的redis集群，在我开发的一个项目中，涉及到了缓存雪崩的问题，当时想到的解决方案是，写一个随机数，随机redis的失效时间，但是，在后续发现了一个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;在早上七点我redis随机了三个小时失效，早上八点我又随机了两个小时失效，这种情况下，在早上十点还是会引发雪崩的问题，并且我们无法保证redis宕机后会怎么办，所以引出了今天redis集群的思考，接下来我们先学习一下reids集群的三种模式。&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap(一)</title>
    <link href="http://example.com/2021/04/09/ConcurrentHashMap-%E4%B8%80/"/>
    <id>http://example.com/2021/04/09/ConcurrentHashMap-%E4%B8%80/</id>
    <published>2021-04-09T13:41:18.000Z</published>
    <updated>2022-02-22T03:23:34.087Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;当我们提到Map集合的时候，我们第一想法都是HashMap和HashTable，但是HashMap和HashTable都有自己的缺点。&lt;/p&gt;
&lt;p&gt;首先HashMap它跟HashTable比，HashMap因为没有加锁，所以它的效率很高，但同时，它在多线程环境下，它无法保</summary>
        
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String字符串有没有上限</title>
    <link href="http://example.com/2021/04/01/String%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%89%E6%B2%A1%E6%9C%89%E4%B8%8A%E9%99%90/"/>
    <id>http://example.com/2021/04/01/String%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%89%E6%B2%A1%E6%9C%89%E4%B8%8A%E9%99%90/</id>
    <published>2021-04-01T13:22:47.000Z</published>
    <updated>2022-02-22T03:23:34.090Z</updated>
    
    
    <summary type="html">&lt;p&gt;String字符串到底有没有上限呢？我们通过源码来分析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先&lt;/strong&gt;，我们需要知道String字符串实际是用什么存储的，在jdk1.6中，String是用byte数组存储的，在jdk1.8中，String是用char[]存储的。&lt;/p&gt;
&lt;p&gt;数组，我们是需要可以设置大小的，数组设置大小有两种方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//数组长度为12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] ar = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;;   &lt;span class=&quot;comment&quot;&gt;//数组长度为5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中，数组长度的定义都为整数，至于为什么是整数类型，我们可以看一下length()这个方法，该方法的返回值是int类型，所以数组长度不可能超过int类型的上限，我们通过Integer的代码中可以看到：&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>maven如何使项目打包时排除指定的依赖</title>
    <link href="http://example.com/2021/03/30/maven%E5%A6%82%E4%BD%95%E4%BD%BF%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%97%B6%E6%8E%92%E9%99%A4%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BE%9D%E8%B5%96/"/>
    <id>http://example.com/2021/03/30/maven%E5%A6%82%E4%BD%95%E4%BD%BF%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%97%B6%E6%8E%92%E9%99%A4%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BE%9D%E8%B5%96/</id>
    <published>2021-03-30T12:06:51.000Z</published>
    <updated>2022-02-22T03:23:34.091Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;打包时，需要将项目中的一些依赖排除出去，查询后使用代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池之Druid--配置篇</title>
    <link href="http://example.com/2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B9%8BDruid/"/>
    <id>http://example.com/2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B9%8BDruid/</id>
    <published>2021-03-23T13:46:12.000Z</published>
    <updated>2022-02-22T03:23:34.095Z</updated>
    
    
    <summary type="html">&lt;p&gt;日常开发中数据库是我们都要使用的，使用数据库也就意味着必须建立项目和数据之间的联系，所以我们需要使用数据库连接池，目前我选择使用druid连接池，该连接池是阿里开源的，功能非常强大，最大的特点是可以监控sql和可视化界面，目前各种数据库连接池的特点如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://aaaas.oss-cn-beijing.aliyuncs.com/image-20210330202641268.png&quot; alt=&quot;image-20210330202641268&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步入正题&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>redis为什么要配置连接池</title>
    <link href="http://example.com/2021/03/23/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://example.com/2021/03/23/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2021-03-23T12:25:48.000Z</published>
    <updated>2022-02-22T03:23:34.091Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;​        </summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="http://example.com/2021/03/12/HashMap/"/>
    <id>http://example.com/2021/03/12/HashMap/</id>
    <published>2021-03-12T14:22:00.000Z</published>
    <updated>2022-02-22T03:23:34.087Z</updated>
    
    
    <summary type="html">&lt;p&gt;我们在日常使用中，最常见的Map集合就是HashMap，但HashMap的存储结构是什么样的，这个在初学的时候很少会有人思考。下面我们便开始深入了解HashMap集合。&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中，创建对象的三种方式</title>
    <link href="http://example.com/2021/03/12/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%EF%BC%8C%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2021/03/12/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%EF%BC%8C%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-03-12T13:14:34.000Z</published>
    <updated>2022-02-22T03:23:34.089Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ul&gt;
&lt;li&gt;无参构造器&lt;/li&gt;
&lt;li&gt;静态工厂&lt;/li&gt;
&lt;li&gt;实例工厂&lt;/li&gt;
&lt;/ul&gt;
</summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java创建对象的四种方式</title>
    <link href="http://example.com/2021/03/11/Java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2021/03/11/Java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-03-11T14:24:07.000Z</published>
    <updated>2022-04-13T01:36:29.473Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ul&gt;
&lt;li&gt;new对象&lt;/li&gt;
&lt;li&gt;反射，使用Java.lang.Class或者java.lang.reflect.Construrctor&lt;/li&gt;
&lt;li&gt;调用对象clone()，注意clone()</summary>
        
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>List</title>
    <link href="http://example.com/2021/03/11/List%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2021/03/11/List%E9%9B%86%E5%90%88/</id>
    <published>2021-03-11T14:22:12.000Z</published>
    <updated>2022-02-22T03:23:34.089Z</updated>
    
    
    <summary type="html">&lt;p&gt;首先，List集合中有几个子类，分别是ArraryList，Vector，LinkList。下面我先现主要说一下最常用的ArrayList。&lt;/p&gt;
&lt;h4 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h4&gt;&lt;p&gt;线程不安全，为什么呢？通过源码我们可以看到，它没有加Synchronized线程锁。其次他是&lt;strong&gt;有序&lt;/strong&gt;的，查询快，但不利于经常修改的场景。&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
</feed>
